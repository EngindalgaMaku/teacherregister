# This PowerShell script fixes the GitHub large file error by creating a clean clone

# Set repository information
$originalRepoPath = "C:\Users\Engin\Documents\tauri1\teacher-registry"
$newRepoPath = "C:\Users\Engin\Documents\teacher-registry-clean"
$gitHubRepo = "https://github.com/EngindalgaMaku/teacher-registry.git"

# Create a fresh clone in a new location
Write-Host "Creating a fresh clone of your repository..." -ForegroundColor Cyan
if (Test-Path $newRepoPath) {
    Write-Host "Clean directory already exists. Removing it..." -ForegroundColor Yellow
    Remove-Item -Path $newRepoPath -Recurse -Force
}

try {
    # Clone the repository
    git clone $gitHubRepo $newRepoPath
    Set-Location $newRepoPath
    
    # Create a .gitignore file
    Write-Host "Creating .gitignore file..." -ForegroundColor Cyan
    @"
# Generated by Cargo
/target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# Executable files
*.exe
*.out
*.app
*.dll

# IDE and editor files
.idea/
.vscode/
*.swp
*.swo

# Environment files
.env
.env.local

# Build output
dist/
build/
"@ | Set-Content -Path .gitignore

    # Copy source files from the original repository
    Write-Host "Copying source files..." -ForegroundColor Cyan
    $filesToCopy = @(
        "src",
        "Cargo.toml",
        "Cargo.lock",
        "README.md",
        "DEPLOYMENT_LINUX.md",
        "coolify-static-deploy.sh",
        "start-nixpacks.sh",
        "teacher-registry.service",
        "Dockerfile",
        "docker-compose.yml",
        "build-linux.sh"
    )

    foreach ($file in $filesToCopy) {
        $sourcePath = Join-Path -Path $originalRepoPath -ChildPath $file
        if (Test-Path $sourcePath) {
            if ((Get-Item $sourcePath) -is [System.IO.DirectoryInfo]) {
                Copy-Item -Path $sourcePath -Destination .\ -Recurse -Force
            } else {
                Copy-Item -Path $sourcePath -Destination .\ -Force
            }
            Write-Host "  Copied $file" -ForegroundColor Green
        } else {
            Write-Host "  File not found: $file" -ForegroundColor Yellow
        }
    }

    # Add all files
    Write-Host "Adding files to Git..." -ForegroundColor Cyan
    git add .

    # Commit the changes
    Write-Host "Committing changes..." -ForegroundColor Cyan
    git commit -m "Clean repository: Remove binary files and add .gitignore"

    # Force push to GitHub
    Write-Host "Pushing to GitHub (this will overwrite the remote repository)..." -ForegroundColor Cyan
    Write-Host "This operation will force-push to GitHub and overwrite history." -ForegroundColor Yellow
    $confirmation = Read-Host "Do you want to continue? (y/n)"
    
    if ($confirmation -eq 'y') {
        git push -f origin main
        Write-Host "Repository cleaned and pushed successfully!" -ForegroundColor Green
    } else {
        Write-Host "Push canceled. You can push manually later with: git push -f origin main" -ForegroundColor Cyan
    }
    
    Write-Host "Process completed. The clean repository is at: $newRepoPath" -ForegroundColor Green
    
} catch {
    Write-Host "An error occurred: $_" -ForegroundColor Red
}